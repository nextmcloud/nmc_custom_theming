/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
import { Component, h, Prop, Host, Event, State, Element, } from '@stencil/core';
import classNames from 'classnames';
let i = 0;
export class Collapsible {
  constructor() {
    /** Default aria-level for heading */
    this.level = 2;
    this.handleClick = () => {
      this.expanded = !this.expanded;
      this.scaleExpand.emit({ expanded: this.expanded });
    };
  }
  componentWillLoad() {
    const j = i++;
    this.headingId = 'collapsable-heading-' + j;
    this.panelId = 'collapsable-panel-' + j;
  }
  componentDidLoad() {
    this.setHeadingFromLightDOM();
  }
  /**
   * In this method we:
   * - query the first element from the light DOM, it should be a heading (e.g. h2)
   * - take its content and place it into our own heading element
   * - set aria-level to the level of that provided in the light DOM
   * - remove the original heading
   * @see https://inclusive-components.design/collapsible-sections/
   */
  setHeadingFromLightDOM() {
    const lightHeading = this.el.querySelector(':first-child');
    if (lightHeading == null) {
      return;
    }
    const level = parseInt(lightHeading.tagName.substr(1), 10);
    if (!level) {
      // tslint:disable-next-line
      console.warn('The first element inside each <scale-collapsible> should be a heading of an appropriate level.');
    }
    if (level !== this.level) {
      this.level = level;
    }
    this.headingElement.innerHTML = lightHeading.innerHTML;
    lightHeading.parentNode.removeChild(lightHeading);
  }
  render() {
    return (h(Host, null,
      this.styles && h("style", null, this.styles),
      h("div", { class: this.getCssClassMap(), part: classNames('base', this.expanded && 'expanded') },
        h("h2", { "aria-level": this.level, class: "collapsible__heading", part: "heading" },
          h("button", { id: this.headingId, class: "collapsible__button", part: "button", onClick: this.handleClick, "aria-expanded": this.expanded ? 'true' : 'false', "aria-controls": this.panelId },
            h("scale-icon-navigation-collapse-down", { size: 16, decorative: true, class: "collapsible__icon", part: classNames('icon', this.expanded && 'expanded') }),
            h("span", { ref: (el) => (this.headingElement = el), part: "button-text" }))),
        h("div", { id: this.panelId, role: "region", "aria-labelledby": this.headingId, hidden: !this.expanded, class: "collapsible__content", part: "content" },
          h("slot", null)))));
  }
  getCssClassMap() {
    return classNames('collapsible', this.expanded && 'collapsible--expanded');
  }
  static get is() { return "scale-collapsible"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["./collapsible.css"]
  }; }
  static get styleUrls() { return {
    "$": ["collapsible.css"]
  }; }
  static get properties() { return {
    "expanded": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set to `true` to expand"
      },
      "attribute": "expanded",
      "reflect": true
    },
    "styles": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) Injected CSS styles"
      },
      "attribute": "styles",
      "reflect": false
    }
  }; }
  static get states() { return {
    "level": {}
  }; }
  static get events() { return [{
      "method": "scaleExpand",
      "name": "scaleExpand",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted so parent <scale-accordion> knows about it"
      },
      "complexType": {
        "original": "CollapsibleEventDetail",
        "resolved": "CollapsibleEventDetail",
        "references": {
          "CollapsibleEventDetail": {
            "location": "local"
          }
        }
      }
    }]; }
  static get elementRef() { return "el"; }
}
