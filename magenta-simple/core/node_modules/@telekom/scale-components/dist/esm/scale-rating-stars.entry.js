import { r as registerInstance, h, H as Host, g as getElement } from './index-5fb2d2c0.js';
import { c as classnames } from './index-349fc524.js';
import { s as statusNote } from './status-note-d227f142.js';

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
function clamp(value, min, max) {
  if (value < min) {
    return min;
  }
  if (value > max) {
    return max;
  }
  return value;
}
const addListener = (key, element, action) => {
  return element.addEventListener(key, (event) => handleClassOnFocus(event, element, action));
};
const removeListener = (key, element, action) => {
  return element.removeEventListener(key, (event) => handleClassOnFocus(event, element, action));
};
function handleListeners(element, handleListener) {
  if (handleListener === 'addListeners') {
    addListener('keydown', element, 'add');
    addListener('keyup', element, 'add');
    addListener('mousedown', element, 'remove');
    addListener('mouseup', element, 'remove');
  }
  else if (handleListener === 'removeListeners') {
    removeListener('keydown', element, 'add');
    removeListener('keyup', element, 'add');
    removeListener('mousedown', element, 'remove');
    removeListener('mouseup', element, 'remove');
  }
}
function handleClassOnFocus(event, element, action) {
  const keys = [
    'Tab',
    'ArrowUp',
    'ArrowDown',
    'ArrowLeft',
    'ArrowRight',
    'Home',
    'End',
    'PageDown',
    'PageUp',
  ];
  if (action === 'add') {
    if (keys.includes(event.key)) {
      // console.log(event.key);
      element.classList.add('rating-focus');
    }
  }
  else if (action === 'remove') {
    element.classList.remove('rating-focus');
  }
}

const ratingStarsCss = ":host{--rating-spacing:0.125rem}.rating__label{position:absolute;bottom:var(--scl-spacing-32, 2rem)}.rating--disabled .rating__label{color:var(--scl-color-grey-50, #7c7c7c)}.rating--small .rating__label{bottom:var(--scl-spacing-24, 1.5rem)}.rating{position:relative;display:inline-flex}.rating--has-label{margin-top:var(--scl-spacing-24, 1.5rem)}.rating:focus{outline:none}.rating-focus:focus{outline:-webkit-focus-ring-color auto 1px}.rating__symbols{display:inline-flex;position:relative;cursor:pointer}.rating__symbols--indicator{position:absolute;top:0;left:0;pointer-events:none}.rating__symbol{display:flex}.rating--disabled .rating__symbols{cursor:default}.rating--hover [selected] path{fill:var(--scl-color-primary-hover, #f80983)}.rating:active [selected] path{fill:var(--scl-color-primary-active, #f80983)}.rating.rating--disabled [selected] path{fill:var(--scl-color-grey-50, #7c7c7c)}.rating__symbol__wrapper{display:flex;padding:0 var(--rating-spacing, 0.125rem)}.rating__symbol__wrapper:first-of-type{padding-left:0}.rating__symbol__wrapper:last-of-type{padding-right:0}";

const RatingStars = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) hoverValue  */
    this.hoverValue = 0;
    /** (optional) isHovering  */
    this.isHovering = false;
    /** (optional) numOfStars  */
    this.numOfStars = 5;
    /** (optional) rating  */
    this.rating = 0;
    /** (optional) small  */
    this.small = false;
    /** (optional) disabled  */
    this.disabled = false;
    /** (optional) ariaTranslation  */
    this.ariaTranslation = `${this.rating} out of ${this.numOfStars} stars`;
    /** (optional) precision  */
    this.precision = 1;
    this.colorFilled = `var(--scl-color-primary)`;
    this.colorBlank = `var(--scl-color-grey-50)`;
    this.size = this.small ? '16px' : '24px';
    this.getSymbol = (color, size, selected) => {
      if (selected) {
        return `<scale-icon-action-favorite color=${color} size=${size} selected />`;
      }
      else {
        return `<scale-icon-action-favorite color=${color} size=${size} />`;
      }
    };
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
    this.handleMouseEnter = this.handleMouseEnter.bind(this);
    this.handleMouseLeave = this.handleMouseLeave.bind(this);
    this.handleMouseMove = this.handleMouseMove.bind(this);
    this.handleMouseClick = this.handleMouseClick.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
  }
  componentDidLoad() {
    handleListeners(this.element, 'addListeners');
  }
  disconnectedCallback() {
    handleListeners(this.element, 'removeListeners');
  }
  handleMouseLeave() {
    this.isHovering = false;
    return false;
  }
  handleMouseEnter() {
    if (!this.disabled) {
      this.isHovering = true;
      return true;
    }
  }
  handleMouseMove(event) {
    this.hoverValue = this.getValueFromMousePosition(event);
  }
  handleMouseClick(event) {
    if (this.disabled) {
      return;
    }
    this.isHovering = false;
    this.rating =
      this.rating === this.hoverValue
        ? 0
        : this.getValueFromMousePosition(event);
  }
  handleKeyDown(event) {
    if (this.disabled) {
      return;
    }
    if (event.key === 'ArrowRight') {
      const ratingPlus = this.rating + this.precision;
      this.rating = clamp(ratingPlus, 0, this.numOfStars);
      event.preventDefault();
    }
    if (event.key === 'ArrowLeft') {
      const ratingMinus = this.rating - this.precision;
      this.rating = clamp(ratingMinus, 0, this.numOfStars);
      event.preventDefault();
    }
    if (event.key === 'Home') {
      this.rating = 0;
      event.preventDefault();
    }
    if (event.key === 'End') {
      this.rating = this.numOfStars;
      event.preventDefault();
    }
  }
  getValueFromMousePosition(event) {
    const containerLeft = this.element.getBoundingClientRect().left;
    const containerWidth = this.element.getBoundingClientRect().width;
    const numOfSections = this.numOfStars / this.precision;
    const sectionWidth = containerWidth / numOfSections;
    const positionOfMousePointer = (event.clientX - containerLeft) / sectionWidth;
    const star = clamp(this.roundToPrecision(positionOfMousePointer * this.precision, this.precision), 0, this.numOfStars);
    return star;
  }
  roundToPrecision(numberToRound, precision = 1) {
    const multiplier = 1 / precision;
    return Math.ceil(numberToRound * multiplier) / multiplier;
  }
  getAriaLabel() {
    return this.ariaTranslation
      .replace(/\$\{x\}/gi, this.rating.toString())
      .replace(/\$\{y\}/gi, this.numOfStars.toString());
  }
  render() {
    const counter = Array.from(Array(this.numOfStars).keys());
    const displayValue = this.isHovering ? this.hoverValue : this.rating;
    return (h(Host, null, h("div", { class: this.getCssClassMap(), id: "rating", ref: (el) => (this.element = el), onMouseMove: this.handleMouseMove, onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave, onClick: this.handleMouseClick, onKeyDown: this.handleKeyDown, tabIndex: this.disabled ? -1 : 0, role: "figure", "aria-describedby": "rating__description", "aria-label": this.label }, h("label", { class: "rating__label", "aria-hidden": "true" }, this.label), h("span", { id: "rating__description", innerHTML: this.getAriaLabel(), hidden: true }), h("span", { class: "rating__symbols", "aria-hidden": "true" }, counter.map((index) => (h("span", { class: "rating__symbol__wrapper", onMouseEnter: this.handleMouseEnter }, h("span", { role: "presentation", style: {
        clipPath: Math.ceil(displayValue) >= index + 1
          ? `inset(0 ${(Math.ceil(displayValue) - index) * 100}% 0 0)`
          : null,
      }, class: {
        rating__symbol: true,
        'rating__symbol--hover': this.isHovering && Math.ceil(displayValue) === index + 1,
      }, innerHTML: this.getSymbol(this.colorBlank, this.size), id: `star-${index + 1}` }))))), h("span", { class: "rating__symbols rating__symbols--indicator", "aria-hidden": "true" }, counter.map((index) => (h("span", { class: "rating__symbol__wrapper", onMouseEnter: this.handleMouseEnter }, h("span", { role: "presentation", style: {
        clipPath: displayValue > index + 1
          ? null
          : `inset(0 ${100 - (displayValue - index) * 100}% 0 0)`,
      }, class: {
        rating__symbol: true,
        'rating__symbol--hover': this.isHovering && Math.ceil(displayValue) === index + 1,
      }, innerHTML: this.getSymbol(this.colorFilled, this.size, true) }))))))));
  }
  getCssClassMap() {
    return classnames('rating', this.disabled && 'rating--disabled', this.isHovering && 'rating--hover', this.small && 'rating--small', this.label && 'rating--has-label');
  }
  get hostElement() { return getElement(this); }
};
RatingStars.style = ratingStarsCss;

export { RatingStars as scale_rating_stars };
