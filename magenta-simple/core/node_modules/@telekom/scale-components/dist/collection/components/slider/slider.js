/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
import { Component, h, State, Prop, Host, Event, } from '@stencil/core';
import classNames from 'classnames';
let i = 0;
export class Slider {
  constructor() {
    /** t(optional) he minimal value of the slider */
    this.min = 0;
    /** (optional) the maximal value of the slider */
    this.max = 100;
    /** (optional) the step size to increase or decrease when dragging slider */
    this.step = 1;
    /** (optional) slider display value */
    this.showValue = true;
    /** (optional) slider custom color */
    this.customColor = '';
    /** (optional) disabled  */
    this.disabled = false;
    /** (optional) smaller track */
    this.trackSmall = false;
    /** (optional) larger thumb */
    this.thumbLarge = false;
    this.onButtonDown = (event) => {
      if (this.disabled) {
        return;
      }
      this.onDragStart(event);
      this.addGlobalListeners();
    };
    this.onDragStart = (event) => {
      this.dragging = true;
      this.startX = this.handleTouchEvent(event).clientX;
      this.startPosition = parseInt(this.currentPosition(), 10);
    };
    this.onDragging = (event) => {
      const { dragging, startX, startPosition } = this;
      if (dragging) {
        this.currentX = this.handleTouchEvent(event).clientX;
        let diff;
        diff = ((this.currentX - startX) / this.sliderTrack.offsetWidth) * 100;
        this.newPosition = startPosition + diff;
        this.setPosition(this.newPosition);
      }
    };
    this.onDragEnd = () => {
      const { dragging, newPosition } = this;
      if (dragging) {
        this.dragging = false;
      }
      this.setPosition(newPosition || this.startPosition);
      this.removeGlobalListeners();
    };
    this.onKeyDown = (event) => {
      if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {
        this.setPosition(this.value + (event.key === 'ArrowRight' ? this.step : -this.step));
      }
      if (['ArrowUp', 'ArrowDown'].includes(event.key)) {
        this.setPosition(this.value +
          (event.key === 'ArrowUp' ? this.step * 10 : -this.step * 10));
      }
    };
    this.setPosition = (newPosition) => {
      if (newPosition < 0) {
        newPosition = 0;
      }
      else if (newPosition > 100) {
        newPosition = 100;
      }
      const lengthPerStep = 100 / ((this.max - this.min) / this.step);
      const steps = Math.round(newPosition / lengthPerStep);
      this.value =
        steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min;
      this.scaleChange.emit(Math.abs(this.value));
    };
    this.onDragging = this.onDragging.bind(this);
    this.onDragEnd = this.onDragEnd.bind(this);
  }
  componentWillLoad() {
    if (this.sliderId == null) {
      this.sliderId = 'slider-' + i++;
    }
  }
  disconnectedCallback() {
    this.removeGlobalListeners();
  }
  addGlobalListeners() {
    window.addEventListener('mousemove', this.onDragging.bind(this));
    window.addEventListener('mouseup', this.onDragEnd.bind(this));
    window.addEventListener('touchmove', this.onDragging.bind(this));
    window.addEventListener('touchend', this.onDragEnd.bind(this));
  }
  removeGlobalListeners() {
    window.removeEventListener('mousemove', this.onDragging);
    window.removeEventListener('mouseup', this.onDragEnd);
    window.removeEventListener('touchmove', this.onDragging);
    window.removeEventListener('touchend', this.onDragEnd);
  }
  handleTouchEvent(event) {
    return event.type.indexOf('touch') === 0 ? event.touches[0] : event;
  }
  currentPosition() {
    return `${((this.value - this.min) / (this.max - this.min)) * 100}%`;
  }
  render() {
    return (h(Host, null,
      this.styles && h("style", null, this.styles),
      h("div", { part: this.getBasePartMap(), class: this.getCssClassMap() },
        !!this.label && (h("label", { part: "label", class: "slider__label", id: `${this.sliderId}-label`, htmlFor: this.sliderId }, this.label)),
        h("div", { part: "track-wrapper", class: "slider__track-wrapper" },
          h("div", { part: "track", class: "slider__track", ref: (el) => (this.sliderTrack = el) },
            h("div", { part: "bar", class: "slider__bar", style: {
                width: `${this.value}%`,
                backgroundColor: this.customColor,
              } }),
            h("div", { part: "thumb-wrapper", class: "slider__thumb-wrapper", style: { left: `${this.value}%` }, onMouseDown: this.onButtonDown, onTouchStart: this.onButtonDown },
              h("div", { part: "thumb", class: "slider__thumb", tabindex: "0", role: "slider", id: this.sliderId, "aria-valuemin": this.min, "aria-valuenow": this.value, "aria-valuemax": this.max, "aria-valuetext": `${this.value}%`, "aria-labelledby": `${this.sliderId}-label`, "aria-orientation": "horizontal", "aria-disabled": this.disabled, onKeyDown: this.onKeyDown }))),
          this.showValue && (h("div", { part: "display-value", class: "slider__display-value" },
            this.value,
            "%"))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'slider';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classNames(component, this.disabled && `${prefix}disabled`, this.trackSmall && `${prefix}track-small`, this.thumbLarge && `${prefix}thumb-large`);
  }
  static get is() { return "scale-slider"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["./slider.css"]
  }; }
  static get styleUrls() { return {
    "$": ["slider.css"]
  }; }
  static get properties() { return {
    "value": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) the display value of the slider"
      },
      "attribute": "value",
      "reflect": false
    },
    "min": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "t(optional) he minimal value of the slider"
      },
      "attribute": "min",
      "reflect": false,
      "defaultValue": "0"
    },
    "max": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) the maximal value of the slider"
      },
      "attribute": "max",
      "reflect": false,
      "defaultValue": "100"
    },
    "step": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) the step size to increase or decrease when dragging slider"
      },
      "attribute": "step",
      "reflect": false,
      "defaultValue": "1"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) slider label"
      },
      "attribute": "label",
      "reflect": false
    },
    "showValue": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) slider display value"
      },
      "attribute": "show-value",
      "reflect": false,
      "defaultValue": "true"
    },
    "customColor": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) slider custom color"
      },
      "attribute": "custom-color",
      "reflect": false,
      "defaultValue": "''"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) disabled"
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "trackSmall": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) smaller track"
      },
      "attribute": "track-small",
      "reflect": false,
      "defaultValue": "false"
    },
    "thumbLarge": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) larger thumb"
      },
      "attribute": "thumb-large",
      "reflect": false,
      "defaultValue": "false"
    },
    "sliderId": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) Slider id"
      },
      "attribute": "slider-id",
      "reflect": false
    },
    "styles": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) Injected CSS styles"
      },
      "attribute": "styles",
      "reflect": false
    }
  }; }
  static get states() { return {
    "dragging": {},
    "startX": {},
    "currentX": {},
    "startPosition": {},
    "newPosition": {}
  }; }
  static get events() { return [{
      "method": "scaleChange",
      "name": "scaleChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      }
    }]; }
}
