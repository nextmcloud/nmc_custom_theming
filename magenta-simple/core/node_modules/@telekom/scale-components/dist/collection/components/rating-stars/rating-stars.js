/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
import { Component, h, Prop, Host, Element } from '@stencil/core';
import { clamp, handleListeners } from './utils/utils';
import classNames from 'classnames';
import statusNote from '../../utils/status-note';
export class RatingStars {
  constructor() {
    /** (optional) hoverValue  */
    this.hoverValue = 0;
    /** (optional) isHovering  */
    this.isHovering = false;
    /** (optional) numOfStars  */
    this.numOfStars = 5;
    /** (optional) rating  */
    this.rating = 0;
    /** (optional) small  */
    this.small = false;
    /** (optional) disabled  */
    this.disabled = false;
    /** (optional) ariaTranslation  */
    this.ariaTranslation = `${this.rating} out of ${this.numOfStars} stars`;
    /** (optional) precision  */
    this.precision = 1;
    this.colorFilled = `var(--scl-color-primary)`;
    this.colorBlank = `var(--scl-color-grey-50)`;
    this.size = this.small ? '16px' : '24px';
    this.getSymbol = (color, size, selected) => {
      if (selected) {
        return `<scale-icon-action-favorite color=${color} size=${size} selected />`;
      }
      else {
        return `<scale-icon-action-favorite color=${color} size=${size} />`;
      }
    };
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
    this.handleMouseEnter = this.handleMouseEnter.bind(this);
    this.handleMouseLeave = this.handleMouseLeave.bind(this);
    this.handleMouseMove = this.handleMouseMove.bind(this);
    this.handleMouseClick = this.handleMouseClick.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
  }
  componentDidLoad() {
    handleListeners(this.element, 'addListeners');
  }
  disconnectedCallback() {
    handleListeners(this.element, 'removeListeners');
  }
  handleMouseLeave() {
    this.isHovering = false;
    return false;
  }
  handleMouseEnter() {
    if (!this.disabled) {
      this.isHovering = true;
      return true;
    }
  }
  handleMouseMove(event) {
    this.hoverValue = this.getValueFromMousePosition(event);
  }
  handleMouseClick(event) {
    if (this.disabled) {
      return;
    }
    this.isHovering = false;
    this.rating =
      this.rating === this.hoverValue
        ? 0
        : this.getValueFromMousePosition(event);
  }
  handleKeyDown(event) {
    if (this.disabled) {
      return;
    }
    if (event.key === 'ArrowRight') {
      const ratingPlus = this.rating + this.precision;
      this.rating = clamp(ratingPlus, 0, this.numOfStars);
      event.preventDefault();
    }
    if (event.key === 'ArrowLeft') {
      const ratingMinus = this.rating - this.precision;
      this.rating = clamp(ratingMinus, 0, this.numOfStars);
      event.preventDefault();
    }
    if (event.key === 'Home') {
      this.rating = 0;
      event.preventDefault();
    }
    if (event.key === 'End') {
      this.rating = this.numOfStars;
      event.preventDefault();
    }
  }
  getValueFromMousePosition(event) {
    const containerLeft = this.element.getBoundingClientRect().left;
    const containerWidth = this.element.getBoundingClientRect().width;
    const numOfSections = this.numOfStars / this.precision;
    const sectionWidth = containerWidth / numOfSections;
    const positionOfMousePointer = (event.clientX - containerLeft) / sectionWidth;
    const star = clamp(this.roundToPrecision(positionOfMousePointer * this.precision, this.precision), 0, this.numOfStars);
    return star;
  }
  roundToPrecision(numberToRound, precision = 1) {
    const multiplier = 1 / precision;
    return Math.ceil(numberToRound * multiplier) / multiplier;
  }
  getAriaLabel() {
    return this.ariaTranslation
      .replace(/\$\{x\}/gi, this.rating.toString())
      .replace(/\$\{y\}/gi, this.numOfStars.toString());
  }
  render() {
    const counter = Array.from(Array(this.numOfStars).keys());
    const displayValue = this.isHovering ? this.hoverValue : this.rating;
    return (h(Host, null,
      h("div", { class: this.getCssClassMap(), id: "rating", ref: (el) => (this.element = el), onMouseMove: this.handleMouseMove, onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave, onClick: this.handleMouseClick, onKeyDown: this.handleKeyDown, tabIndex: this.disabled ? -1 : 0, role: "figure", "aria-describedby": "rating__description", "aria-label": this.label },
        h("label", { class: "rating__label", "aria-hidden": "true" }, this.label),
        h("span", { id: "rating__description", innerHTML: this.getAriaLabel(), hidden: true }),
        h("span", { class: "rating__symbols", "aria-hidden": "true" }, counter.map((index) => (h("span", { class: "rating__symbol__wrapper", onMouseEnter: this.handleMouseEnter },
          h("span", { role: "presentation", style: {
              clipPath: Math.ceil(displayValue) >= index + 1
                ? `inset(0 ${(Math.ceil(displayValue) - index) * 100}% 0 0)`
                : null,
            }, class: {
              rating__symbol: true,
              'rating__symbol--hover': this.isHovering && Math.ceil(displayValue) === index + 1,
            }, innerHTML: this.getSymbol(this.colorBlank, this.size), id: `star-${index + 1}` }))))),
        h("span", { class: "rating__symbols rating__symbols--indicator", "aria-hidden": "true" }, counter.map((index) => (h("span", { class: "rating__symbol__wrapper", onMouseEnter: this.handleMouseEnter },
          h("span", { role: "presentation", style: {
              clipPath: displayValue > index + 1
                ? null
                : `inset(0 ${100 - (displayValue - index) * 100}% 0 0)`,
            }, class: {
              rating__symbol: true,
              'rating__symbol--hover': this.isHovering && Math.ceil(displayValue) === index + 1,
            }, innerHTML: this.getSymbol(this.colorFilled, this.size, true) }))))))));
  }
  getCssClassMap() {
    return classNames('rating', this.disabled && 'rating--disabled', this.isHovering && 'rating--hover', this.small && 'rating--small', this.label && 'rating--has-label');
  }
  static get is() { return "scale-rating-stars"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["rating-stars.css"]
  }; }
  static get styleUrls() { return {
    "$": ["rating-stars.css"]
  }; }
  static get properties() { return {
    "hoverValue": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) hoverValue"
      },
      "attribute": "hover-value",
      "reflect": false,
      "defaultValue": "0"
    },
    "isHovering": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) isHovering"
      },
      "attribute": "is-hovering",
      "reflect": false,
      "defaultValue": "false"
    },
    "numOfStars": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) numOfStars"
      },
      "attribute": "num-of-stars",
      "reflect": false,
      "defaultValue": "5"
    },
    "rating": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) rating"
      },
      "attribute": "rating",
      "reflect": false,
      "defaultValue": "0"
    },
    "small": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) small"
      },
      "attribute": "small",
      "reflect": false,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) disabled"
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "ariaTranslation": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) ariaTranslation"
      },
      "attribute": "aria-translation",
      "reflect": false,
      "defaultValue": "`${this.rating} out of ${this.numOfStars} stars`"
    },
    "precision": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) precision"
      },
      "attribute": "precision",
      "reflect": false,
      "defaultValue": "1"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) slider label"
      },
      "attribute": "label",
      "reflect": false
    }
  }; }
  static get elementRef() { return "hostElement"; }
}
