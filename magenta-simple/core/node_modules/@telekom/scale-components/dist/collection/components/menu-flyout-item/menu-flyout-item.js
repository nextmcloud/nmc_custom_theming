/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
import { Component, Prop, h, Host, Element, Method, State, } from '@stencil/core';
import classNames from 'classnames';
const name = 'menu-item';
export class MenuFlyoutItem {
  /* 6. Lifecycle Events (call order) */
  constructor() {
    /* 2. State Variables (alphabetical) */
    this.hasFocus = false;
    /* 3. Public Properties (alphabetical) */
    /** (optional) Used by cascading menus to set when open */
    this.active = false;
    /** (optional) Set to true to display arrow icon suffix */
    this.cascade = false;
    /** (optional) Disabled */
    this.disabled = false;
  }
  connectedCallback() { }
  componentWillLoad() { }
  componentWillUpdate() { }
  componentDidRender() { }
  componentDidLoad() { }
  componentDidUpdate() { }
  disconnectedCallback() { }
  /* 7. Listeners */
  /* 8. Public Methods */
  /** Sets the focus on the item */
  async setFocus() {
    this.menuItem.focus();
  }
  /** Removes the focus from the item */
  async removeFocus() {
    this.menuItem.blur();
  }
  /* 9. Local Methods */
  getCssClassMap() {
    return classNames(name, this.disabled && `${name}--disabled`, this.hasFocus && `${name}--focused`, this.active && `${name}--active`);
  }
  /* 10. Render */
  render() {
    return (h(Host, null,
      this.styles && h("style", null, this.styles),
      h("div", { class: this.getCssClassMap(), ref: (el) => (this.menuItem = el), part: "base", role: "menuitem", tabindex: "-1", "aria-disabled": this.disabled ? 'true' : 'false', onFocus: () => (this.hasFocus = true), onBlur: () => (this.hasFocus = false), onMouseEnter: () => this.setFocus(), onMouseLeave: () => this.removeFocus(), onTouchStart: () => this.setFocus(), onTouchEnd: () => this.removeFocus() },
        h("span", { part: "prefix", class: `${name}__prefix` }, this.checked === undefined ? (h("slot", { name: "prefix" })) : (h("scale-icon-action-success", { class: `${name}__check`, style: {
            opacity: !this.checked || this.checked === 'false' ? '0' : '1',
          }, size: 16 }))),
        h("span", { part: "label", class: `${name}__label` },
          h("slot", null)),
        h("span", { part: "suffix", class: `${name}__suffix` }, this.cascade ? (h("scale-icon-navigation-right", { class: `${name}__cascade`, size: 16, slot: "suffix" })) : (h("slot", { name: "suffix" }))))));
  }
  static get is() { return "scale-menu-flyout-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["menu-flyout-item.css"]
  }; }
  static get styleUrls() { return {
    "$": ["menu-flyout-item.css"]
  }; }
  static get properties() { return {
    "active": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) Used by cascading menus to set when open"
      },
      "attribute": "active",
      "reflect": false,
      "defaultValue": "false"
    },
    "cascade": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) Set to true to display arrow icon suffix"
      },
      "attribute": "cascade",
      "reflect": false,
      "defaultValue": "false"
    },
    "checked": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) Set to true to display check prefix, false to display empty prefix"
      },
      "attribute": "checked",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) Disabled"
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "styles": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) Injected styles"
      },
      "attribute": "styles",
      "reflect": false
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "(optional) value"
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "hasFocus": {}
  }; }
  static get methods() { return {
    "setFocus": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets the focus on the item",
        "tags": []
      }
    },
    "removeFocus": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Removes the focus from the item",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "hostElement"; }
}
