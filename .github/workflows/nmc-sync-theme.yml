name: Sync theme basefiles

# this workflow is manually triggered
# and every day at midnight
on:
  workflow_dispatch:
#  schedule:
#    - cron: '0 0 * * *'

env:
  UPSTREAM_REPO: 'nextcloud/server'
  UPSTREAM_BRANCH: 'master'
  SYNC_DIR: 'magentacloud25'
  SYNC_FILES: |
    core/css/server.scss
    lib/l10n/de_DE.json
    lib/l10n/en_GB.json
    not_existing_fail.txt
  SYNC_REPO: ${{ github.repository }}
  SYNC_BRANCH: ${{ github.refs }}

jobs:
  sync-from-upstream:
    runs-on: ubuntu-latest
    env:
      upstream_path: source
      downstream_path: syncrepo
    steps:
    - name: Checkout upstream code
      uses: actions/checkout@v3
      with:
        repository: ${{ env.UPSTREAM_REPO }}
        ref: ${{ env.UPSTREAM_BRANCH }}
        fetch-depth: 4
        path: ${{ env.upstream_path }}
    - name: Checkout repo to sync
      uses: actions/checkout@v3
      with:
        repository: ${{ env.SYNC_REPO }}
        ref: ${{ env.SYNC_BRANCH }}
        fetch-depth: 4
        path: ${{ env.downstream_path }}
    - name: Sync upstream files since last checkout
      env:
        UPSTREAM: ${{ github.workspace }}/${{ env.upstream_path }}
        DOWNSTREAM: ${{ github.workspace }}/${{ env.downstream_path }}/${{ env.SYNC_DIR }}
      run: |
        mkdir -p $DOWNSTREAM
        cd $DOWNSTREAM
        git config user.name $GITHUB_ACTOR
        git config user.email $GITHUB_ACTOR@github.com
        #iterate over each file separately
        for syncfile in $SYNC_FILES
        do
            cd $UPSTREAM
            echo "::group::$syncfile"
            if [ ! -f "$UPSTREAM/$syncfile" ]
            then
                echo "::error file=$syncfile::No upstream file [$UPSTREAM/$syncfile](https://github.com/$THEME_SYNC_OWNER/$THEME_SYNC_REPO/$syncfile)" 
            else 
                cd $DOWNSTREAM
                # check whether the file with commits exists already downstream
                if [ -f $DOWNSTREAM/$syncfile ] && [ "$(git log -i --format=%H -- $DOWNSTREAM/$syncfile)" ]
                then
                    # copy commits since last downstream sync of existing file
                    lastCommitDate=$(git log -1 --format=%ci $DOWNSTREAM/$syncfile)
                    cd $UPSTREAM        
                    for commitId in $(git log --since="$lastCommitDate" --format=%H --reverse $UPSTREAM/$syncfile)
                    do
                        cd $UPSTREAM
                        echo "::notice::Sync $(git log -1 --oneline $commitId -- $UPSTREAM/$syncfile)" 
                        commitMessages=$(git log -1 --format="-m \"%s\" -m \"Upstream commit: %H\" -m \"%b\"" $commitId -- $UPSTREAM/$syncfile)
                        git show --patch $commitId > /tmp/transfer.patch
                        cd $DOWNSTREAM
                        git apply --allow-empty --include $syncfile /tmp/transfer.patch
                        eval git commit $commitMessages $DOWNSTREAM/$syncfile
                    done
                else
                    # create initial filecopy with latest commit
                    cd $UPSTREAM        
                    echo "::notice::Init $(git log -1 --oneline -- $UPSTREAM/$syncfile)" 
                    latestCommitMessages=$(git log -1 --format="-m \"%s\" -m \"Init upstream commit: %H\" -m \"%b\"" -- $UPSTREAM/$syncfile)
                    cd $DOWNSTREAM
                    mkdir -p $(dirname $DOWNSTREAM/$syncfile)
                    cp $UPSTREAM/$syncfile $DOWNSTREAM/$syncfile
                    git add $DOWNSTREAM/$syncfile
                    eval git commit $latestCommitMessages $DOWNSTREAM/$syncfile
                fi
            fi
            echo "::endgroup::"
        done
        # cleanup
        rm -f /tmp/transfer.patch

    #- name: Push sync update
    #  run: |
    #    cd $DOWNSTREAM
    #    git push
