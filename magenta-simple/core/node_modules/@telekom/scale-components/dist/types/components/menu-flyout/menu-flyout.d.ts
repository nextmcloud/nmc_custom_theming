/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
import { EventEmitter } from '../../stencil-public-runtime';
export declare class MenuFlyout {
  hostElement: HTMLElement;
  /** Used to force a re-render */
  forceRender: number;
  /** (optional) Determines whether the dropdown should close when a menu item is selected */
  closeOnSelect: boolean;
  /** (optional) Set preference for where the menu appears, space permitting */
  direction: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'right' | 'left';
  /** (optional) Tracks the menu list open state */
  open: boolean;
  /** (optional) Injected styles */
  styles?: string;
  /** Event triggered when menu list opened */
  scaleOpen: EventEmitter<{
    id: number;
    cascadeLevel: number;
  }>;
  /** Event triggered when menu list closed */
  scaleClose: EventEmitter<{
    id: number;
    cascadeLevel: number;
  }>;
  /** Event triggered when nested menu item selected */
  scaleSelect: EventEmitter<{
    item: HTMLElement;
  }>;
  /** Cascade level to help with closing when siblings are opened */
  private cascadeLevel;
  /** When menu off the screen horizontally */
  private flipHorizontal;
  /** When menu off the screen vertically */
  private flipVertical;
  /** Unique ID of component */
  private id;
  /** True if menu a nested menu */
  private isCascaded;
  /** Keep track of list element */
  private list;
  /** Keep track of list slot */
  private listSlot;
  /** Get access to force height of trigger - solving relative issues with cascade menus */
  private listWrapper;
  /** Store for switching classes after boundary checks */
  private main;
  /** Set true when resize or when opened */
  private needsCheckPlacement;
  /** Keep track of slotted list */
  private slottedList;
  /** Keep track of trigger */
  private trigger;
  /** Keep track of trigger slot */
  private triggerSlot;
  /** Track height to see if menus are off screen */
  private windowHeight;
  /** Track width to see if menus are off screen */
  private windowWidth;
  constructor();
  connectedCallback(): void;
  componentWillLoad(): void;
  componentWillUpdate(): void;
  componentWillRender(): void;
  componentDidRender(): void;
  componentDidLoad(): void;
  componentDidUpdate(): void;
  disconnectedCallback(): void;
  scrollHandler(): void;
  resizeHandler(): void;
  openHandler(): void;
  childClosedHandler({ detail }: {
    detail: any;
  }): void;
  relativeOpenHandler({ detail }: {
    detail: any;
  }): void;
  getCssClassMap(): string;
  calculateCascadeLevel(): void;
  determineDefaultDirection(): void;
  getWindowSize(): void;
  updateTriggerAttributes(): void;
  checkPlacement(): void;
  setListWrapperSize(): void;
  setListWrapperPosition(): void;
  toggleOpenState(): void;
  emitOpenState(): void;
  onCatcherClick(e: any): void;
  onCatcherScroll(): void;
  onTriggerClick(): void;
  onMenuClick(event: MouseEvent): void;
  handleKeyDown(e: KeyboardEvent): void;
  handleKeyUp(): void;
  render(): any;
}
